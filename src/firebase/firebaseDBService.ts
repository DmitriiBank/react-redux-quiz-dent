import {
    doc,
    getDoc,
    setDoc,
    updateDoc,
} from 'firebase/firestore'
import {db, auth} from "../configurations/firebase-config";
import type {TestRecord} from "../utils/User.ts";
import type {SignupData} from "../utils/quiz-types.ts";

export const createUserInDb = async (userDto: SignupData) => {
    console.log('üî• –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore');
    console.log('üìù –î–∞–Ω–Ω—ã–µ:', userDto);

    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º UID –∏–∑ Firebase Auth, –∞ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
        const currentUser = auth.currentUser;
        if (!currentUser) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
        }

        const displayName = `${userDto.first_name} ${userDto.last_name}`.trim();

        const newUser = {
            uid: currentUser.uid, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π UID
            displayName,
            email: userDto.email,
            testList: [] // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±—ã–ª–æ tests, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å testList
        };

        console.log('üì§ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ:', newUser);
        console.log('üìç –í –¥–æ–∫—É–º–µ–Ω—Ç —Å ID:', newUser.uid);

        await setDoc(doc(db, "users", newUser.uid), newUser);
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ Firestore!');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        const savedDoc = await getDoc(doc(db, "users", newUser.uid));
        if (savedDoc.exists()) {
            console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
            console.log('üìÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', savedDoc.data());
        } else {
            console.error('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }

        return newUser;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        throw error;
    }
};

export const saveTestResult = async (
    uid: string,
    idTest: string,
    score: number,
    totalQuestions: number
) => {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:', {
        uid,
        idTest,
        score,
        totalQuestions
    });

    try {
        const scoreString = `${score}/${totalQuestions}`;
        const userRef = doc(db, "users", uid);

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç-—Ä–µ–∫–æ—Ä–¥
        const newTestRecord: TestRecord = {
            idTest,
            title: getTestTitle(idTest), // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
            score: scoreString,
            completed: true
        };

        const userSnap = await getDoc(userRef);

        if (userSnap.exists()) {
            const userData = userSnap.data();
            const updatedTests = userData.testList || [];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–µ—Å—Ç
            const existingTestIndex = updatedTests.findIndex((test: TestRecord) => test.idTest === idTest);

            if (existingTestIndex >= 0) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ—Å—Ç
                updatedTests[existingTestIndex] = newTestRecord;
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç
                updatedTests.push(newTestRecord);
            }

            await updateDoc(userRef, { testList: updatedTests });
            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
            return true;
        } else {
            console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', uid);
            throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error);
        throw error;
    }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
const getTestTitle = (testId: string): string => {
    const testTitles: { [key: string]: string } = {
        "lesson1": "–õ–µ–∫—Ü–∏—è 1",
        "lesson2": "–õ–µ–∫—Ü–∏—è 2",
        "lesson3": "–õ–µ–∫—Ü–∏—è 3",
        "lesson4": "–õ–µ–∫—Ü–∏—è 4",
        "lesson5": "–õ–µ–∫—Ü–∏—è 5",
        "lesson6": "–õ–µ–∫—Ü–∏—è 6",
        "lesson7": "–õ–µ–∫—Ü–∏—è 7",
        "lesson8": "–õ–µ–∫—Ü–∏—è 8"
    };
    return testTitles[testId] || `–¢–µ—Å—Ç ${testId}`;
};

export const canTakeTest = async (uid: string, testId: string): Promise<boolean> => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ uid –Ω–µ –ø—É—Å—Ç–æ–π
        if (!uid || !testId) {
            console.warn('canTakeTest: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç uid –∏–ª–∏ testId');
            return true; // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        }

        const userRef = doc(db, "users", uid);
        const userSnap = await getDoc(userRef);

        if (userSnap.exists()) {
            const userData = userSnap.data();
            const test = userData.testList?.find((t: TestRecord) => t.idTest === testId);
            return test ? !test.completed : true; // –ï—Å–ª–∏ —Ç–µ—Å—Ç –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º completed, –∏–Ω–∞—á–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º
        }

        return true; // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–∞:', error);
        return true; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ
    }
};

export const getUserData = async (uid: string | null | undefined) => {
    try {
        if (!uid) {
            console.warn('getUserData: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç uid');
            return null;
        }

        const userRef = doc(db, "users", uid);
        const userSnap = await getDoc(userRef);

        if (userSnap.exists()) {
            return userSnap.data();
        }

        return null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return null;
    }
};